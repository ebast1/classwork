namespace SampleOOPApplication;

/*********************************************************************
 * This class will represent a Person
 *
 * A class has data (attributes) and methods (behavior)
 *
 * Attributes: Name
 *             Height
 *             Weight
 *             Age
 *             Gender
 *             EyeColor
 *             HairColor
 *********************************************************************/

// A class is usually public so others can use it
public class Person
{
 /******************************************************************************
  * Instance variables identify attributes unique to an object of a class
  *
  * Usually private to protect access from outside access - Encapsulation
  *****************************************************************************/

 private string _name;           // C# coding convention is private variables start with _
 private int    _heightInInches; // C# coding convention is private variables start with _
 private double _weightInPounds; // C# coding convention is private variables start with _
 private int    _age;            // C# coding convention is private variables start with _
 private string _gender;         // C# coding convention is private variables start with _
 
 /*****************************************************************************
  * Properties to allow access to the data
  *
  * 3 ways to define getters and setters shown
  *****************************************************************************/
 
 // Automatically implemented property
 // Convenient and Common - no special processing for getter/setter
 // Automatically defines a private variable for you (you don't need to declare it)
 // Use the Property Name to access the data if you set up a private variable on your own
 public string Name { get; set; }   // Use property name to assign values

 
 // full property syntax or block-bodied syntax
 // Usually/Should have a private variable defined that it represents
 // you provide the processing for the getter/setter
 // flexible, it allows for custom logic in the getter and the setter
 // Fairly common
 public int HeightInInches
 {
     get { return _heightInInches; }
     
     set { _heightInInches = value; } // value is keyword that represents the value passed to the setter
 }
 
 // Expression-bodied-property
 // More concise and more formal (less code, but can be confusing)
 public double WeightInPounds
 {
     get => _weightInPounds;
     set => _weightInPounds = value;
 }
 
 public int Age
 {
     get => _age;
     set => _age = value;
 }
 
 public string Gender
 {
     get => _gender;
     // For objects, you can have C# throw an exception if null
     // ?? 
     // ??
     set => _gender = value ?? throw new ArgumentNullException(nameof(value));
 }

 /***************************************************************************************
  * Constructors - Initialize objects of the class
  **************************************************************************************/
 public Person(string name, int heightInInches, double weightInPounds, int age, string gender)
 {
     Name = name;
     HeightInInches = heightInInches;
     WeightInPounds = weightInPounds;
     Age = age;
     Gender = gender;
 }
 /********************************************************************************
  * Method overrides for default behaviors we don't want
  *
  * ToString()
  * Equals()
  * GetHashCode()
  *
  * DO NOT ACCEPT THE CODE GENERATED BY AN IDE FOR THESE WITHOUT LOOKING AT IT
  **********************************************************************************/
 public override bool Equals(object? obj)
 {
     // return base.Equals(obj);  // performs default base default

     Person otherPerson = (Person)obj;
     
     if (this.Name == otherPerson.Name
         && this.HeightInInches == otherPerson.HeightInInches
         && this.WeightInPounds == otherPerson.WeightInPounds
         && this.Age == otherPerson.Age
         && this.Gender == otherPerson.Gender)
     {
         return true;
     }
     
     return false;
 }

 // Override the default GetHashCode method:  public int GetHashCode()
 //
 // GetHashCode() should return a unique value generated by the member data
 //
 // GetHashCode() is used by C# in certain situations to determine of two
 //                  objects are equal and when inserting an object in
 //                  a hash-based collection e.g. HashSet, HashTable. 
 //-------------------------------------------------------------------------
 public override int GetHashCode()
 {
     // A HashCode may be generated determining the sum of:
     //
     //     numeric values * prime-number
     //     (some prime numbers:  11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)
     //     string, bool, objects - Use System GetHashCode method
     return (int)_heightInInches * 17
            + _name.GetHashCode()
            + _gender.GetHashCode()
            + (int) _weightInPounds * 17
            + _age * 17;
 }

 public override string ToString()
 {
     return $"{Name} is {HeightInInches} inches {Gender} {Age} years old";

 }
 
} // End of Person class