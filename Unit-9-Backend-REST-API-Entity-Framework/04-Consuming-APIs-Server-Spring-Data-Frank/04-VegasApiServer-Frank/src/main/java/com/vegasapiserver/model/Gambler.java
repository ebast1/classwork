package com.vegasapiserver.model;
import jakarta.persistence.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import  java.util.Objects;

// In the MVC (Model-View-Controller) Server architecture
// the Model is the data that is being manipulated by the server
// The Model is a class that represents the data structure
// In Java we call it a POJO (Plain Old Java Object)
// In C# it is called a POCO (Plain Old CLR Object)
//
// A POJO/POCO is a simple class that has no special requirements
//
//  It has: Data members (fields) to hold the data
//          Constructors to initialize the data members
//          Standard Getters and Setters to access and modify the data members
//            (Standard names:  getVarableName  setVariableName)
//          toString() method to return a string representation of the object
//          equals() method to compare two objects for equality
//          hashCode() method to return a hash code for the object

@Entity                   // Tells the data framework this class is a POJO for a table
@Table(name = "gambler")  // Tells the data framework the name of the table in the database
public class Gambler {
    /***********************************************************************
     * Data Members
     *
     *     If you plan on having an IDE generate any code for you
     *        be sure you have defined them as you want them
     *
     *     If change any part of the definition
     *        or add/delete data members
     *           be sure to regenerate any IDE generated code
     ***********************************************************************/

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "gambler_name")
    private String   name;

    private String   address;

    @Column(name = "monthly_salary")
    private double   salary;

    @Column(name = "birth_date")
    private Date birthDate;

    @Version
    private Long version;

    /****************************************************************************
     * Constructors
     *      Default/0-arg in case it's needed created by programmer
     *      All data members - generated by IDE AFTER all data members definesd
     *      Additional constructors created by programmer
     ****************************************************************************/

    // 0-arg constructor may be used by Java/C# when needed
    public Gambler() { }

    // 5-arg constructor - accepts all data members
    // Note: the throws added to the method signature due to .parse possibly throwing a ParseException
    //       if the .parse was in try/catch block the throws would not be required
    public Gambler(int id, String name, String address, double salary, String birthDate, Long version) throws ParseException {
        this.id   = id;
        this.name = name;
        this.address   = address;
        this.salary    = salary;
        this.version   = version;

        // Convert a String reprsemtation of a date to Java Date
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        this.birthDate = formatter.parse(birthDate);
    }

/****************************************************************************
 * Getters and Setters for each data member
 *     Standard versions generated by IDE AFTER all data members defined
 *     Additional versions programmer created as needed
 ****************************************************************************/
    public int    getId() {  return id; }
    public void   setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void   setName(String name) { this.name = name; }

    public String getAddress() { return address; }
    public void   setAddress(String address) { this.address = address; }

    public double getSalary() { return salary; }
    public void   setSalary(double salary) { this.salary = salary; }

    public Date   getBirthDate() { return birthDate; }
    public void   setBirthDate(Date birthDate) { this.birthDate = birthDate; }

    // Additional Setter created by the programmer to allow birth date to be set to string
    public void   setBirthDate(String birthDate) throws ParseException {
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        this.birthDate = formatter.parse(birthDate);
    }

    public Long getVersion() { return version; }

    public void setVersion(Long version) { this.version = version; }

    /****************************************************************************
     *  Standard Overrides for methods
     *       you want to customize from the default behavior
     *
     *  toString, equals and hashCode should always be overridden
     *
     *  Most IDEs (like IntelliJ IDEA, Eclipse, etc.)
     *       will generate these for you)
     *  (Be sure all data members are defined as required
     *      before having the IDE generate them)
     ****************************************************************************/

    @Override
    public String toString() {
        return "Gambler{" +
                "Id=" + id +
                ", Name='" + name + '\'' +
                ", Address='" + address + '\'' +
                ", Salary=" + salary +
                ", BirthDate=" + birthDate +
                ", Version=" + version   +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Gambler gambler = (Gambler) o;
        return id == gambler.id
            && Double.compare(salary   , gambler.salary) == 0
            && Objects.equals(name     , gambler.name)
            && Objects.equals(address  , gambler.address)
            && Objects.equals(birthDate, gambler.birthDate)
            && Objects.equals(version  , gambler.version);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, address, salary, birthDate, version);
    }

    /****************************************************************************
     * Additional methods to support the class
     ****************************************************************************/

    // No additional methods for this class


} //End of Gambler class
