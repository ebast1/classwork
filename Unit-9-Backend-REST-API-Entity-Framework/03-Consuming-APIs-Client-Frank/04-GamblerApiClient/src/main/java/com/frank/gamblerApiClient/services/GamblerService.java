package com.frank.gamblerApiClient.services;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestClientResponseException;
import org.springframework.web.client.RestTemplate;

import com.frank.gamblerApiClient.models.*;  // Short hand for accessing all classes in the model

public class GamblerService {

  // Usually the starting part of the URL for API is stored as a contant
  //    other parts of the URL are added as needed
  private final String BASE_URL;  // Reference to the starting part of all URLs (usually server identifiers)

  // RestTemplate is a Spring Framework class for performing REST Api calls
  //
  // RestTemplate contains methods for making HTTP request
  //   and collect all exceptions that might happen into only two
  ///
  //    RestClientResponseException - There was something with the request you sent to the server
  //    ResourceAccessException     - The server had an error (it's usually something the developer did)
  //
  // Before you start to code an API call you should know/find out:
  //    The URL paths the API supports and what they expect and what they return
  //
  // For out VegasAPIServer the URL are:
  //
  // GET - /gamblers       - return all the gamblers in the data source
  //                         getForObject(API-URL-Path, data-type-for-returned-object)
  //
  // GET - /gamblers/{id}  - return the gambler in the data source with tge id given
  //                         getForObject(API-URL-Path, data-type-for-returned-object)
  //
  // GET - /gambler/search - return all the gamblers whose name contains the search value
  //                         search criteria is specified in a query parameter called 'name'
  //                         getForObject(API-URL-Path, data-type-for-returned-object)
  //
  // POST - /gamblers      - add a gambler to the data source
  //                         postForObject(API-URL-Path, anEntity-Object, data-type-of-object-being-sent)
  //
  //                         since this is a POST, the object for new Gambler
  //                               must be in the body of the request
  //
  //                         An Entity-Object will hold any data being sent in the body of the request
  //                            and any headers that describe request
  //
  //                         returns the Gambler that was added with any additional data
  //                         (in a relational table primary key is usually generated by DBMS
  //                             you don't supply in the new object you send
  //                             but you may need to know what value the DBMS set for the primary key
  //                             the best way for you to know the primary key is if the API returns update object)
  //
  // PUT - /gamblers       - update a gambler to the data source
  //                         put(API-URL-Path, anEntity-Object, data-type-of-object-being-sent)
  //
  //                         since this is a PUT, the object with the updated Gambler
  //                               must be in the body
  //
  //                         An Entity-Object will hold any data being sent in the body of the request
  //                                   and any headers that describe request
  //
  //                         returns the Gambler that was update with any additional data
  //                         (occasionally the update process may generate new data
  //                          a common piece of data is the timestamp of the update
  //                          the application program really doesn't know the instant and object
  //                          is updated in the data source as it's usually generated bt the DBMS
  //                          if it is needed)
  //
  // DELETE - /gamblers/{id} - delete the Gambler from the source with the given id
  //                           since this a DELETE
  //                           returns nothings



  // Define a reference to the a RestTemplate and instantiate a RestTemplate object
  private final RestTemplate restTemplate = new RestTemplate();

  public GamblerService() {
    BASE_URL = "http://localhost:8081/";  // Assign the API URL base string to the BASE_URL
                                          // Some people include the / at the end spe don't
                                          // If you include the / you don't need it later
                                          // If you don't include the / you have to add it later
  }

  /**
   * Retrieve all Gamblers in the data source
   * @return List<Gambler>
   */
  public Gambler[] getAllGamblers() {
      // Use the getForObject RestTemplate method to execute a GET Http request
      //     to our API server
      //
      // It's called getForObject() because it returns an Object (NOT JSON)
      // YOU don't have to convert the JSON that comes back into an object
      //
      // RestTemplate methods return either individual objects, array or objects or nothing
      //
      // RestTemplate may be used in any programming language
      // Collection class structures like List, ArrayList, Map, Dictionary, Stack, Queue, Set et al
      // may be implemented differently in each programming language
      //
      // arrays are the same in all programming languages
      //
      // RestTemplate doesn't want to know how to create a Collection object of every programming language
      // so it returns the most common data structure for all programming language (array)
      //

      Gambler[] theGamblers = null;  // Array to hold the data returned from the API
      try {
        //                         getForObject(URL-for-the-API-Call , What you the JSON converted to
        theGamblers = restTemplate.getForObject(BASE_URL + "gamblers", Gambler[].class);
      } catch (RestClientResponseException expceptionObj) {
        // handles exceptions thrown by rest template and contains status codes
        // Display the status code and any message related too teh error
        System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
      } catch (ResourceAccessException exceptionObj) {
        // i/o error, ex: the server isn't running
        // Since the request was never processed there is no status code to display
        // YOu can still display or log the message
        System.out.println(exceptionObj.getMessage());
      }
      return theGamblers;
  }

  /**
   * Retrieve a Gambler by id in the data source
   * @return Gambler
   */
  public Gambler getAGambler(int id) {
    Gambler theGambler = null;
    try {
      // We know only one object will be returned because we are providing the primary key
      theGambler = restTemplate.getForObject(BASE_URL + "gamblers/"+id, Gambler.class);
    } catch (RestClientResponseException expceptionObj) {
      // handles exceptions thrown by rest template and contains status codes
      System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
    } catch (ResourceAccessException exceptionObj) {
      // i/o error, ex: the server isn't running
      System.out.println(exceptionObj.getMessage());
    }
    return theGambler;
  }

    /**
     * Add the Gambler given to the data source
     * @return Gambler
     */
    public Gambler addAGambler(Gambler gamblerToAdd) {

        // If the object sent to added is null, don't add it
        // (there may be an object where all attributes are setto null - that's OK)
        // If you try add a null object to most data sources you we get a NullPointerException
        if (gamblerToAdd == null) {
            return null;
        }

        // Hold the Gambler returned the API call - it may some data filled or changed by API
        Gambler theAddedGambler = null;

        // A POST request needs header to tell about the request and the data being sent

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);  // Tell the server the request contains JSON

        // Create an Entity object for the request that contains
        //    the object to be placed in the body of the request and the headers
        HttpEntity<Gambler> entity = new HttpEntity<>(gamblerToAdd, headers);

        try {
            theAddedGambler = restTemplate.postForObject(BASE_URL + "gamblers", entity, Gambler.class);
        } catch (RestClientResponseException expceptionObj) {
            // handles exceptions thrown by rest template and contains status codes
            System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
        } catch (ResourceAccessException exceptionObj) {
            // i/o error, ex: the server isn't running
            System.out.println(exceptionObj.getMessage());
        }
        return theAddedGambler;
    }

    /**
     * Update the Gambler given to the data source
     * @return Gambler
     */
    // The HTTP PUT returns nothing so we don't either
    public void updateAGambler(Gambler gamblerToUpdate) {
        // If the object sent to be update is null, don't update it
        // (there may be an object where all attributes are set to null - that's OK)
        // If you try update a null object to most data sources you we get a NullPointerException
        if (gamblerToUpdate == null) {
            return;
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Gambler> entity = new HttpEntity<>(gamblerToUpdate, headers);

        try { // Nothing is returned from a PUT so there is nothing to store
            restTemplate.put(BASE_URL + "gamblers", entity, Gambler.class);
       } catch (RestClientResponseException expceptionObj) {
            // handles exceptions thrown by rest template and contains status codes
            System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
        } catch (ResourceAccessException exceptionObj) {
            // i/o error, ex: the server isn't running
            System.out.println(exceptionObj.getMessage());
        }
    }

    /**
     * Delete an existing gambler in the data source
     * @param id
     */
    // HTTP DELETE returns nothing, so we don't either
    public void deleteAGambler(int id) {
        try {
            restTemplate.delete(BASE_URL + "gamblers/" + id);
        } catch (RestClientResponseException expceptionObj) {
            // handles exceptions thrown by rest template and contains status codes
            System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
        } catch (ResourceAccessException exceptionObj) {
            // i/o error, ex: the server isn't running
            System.out.println(exceptionObj.getMessage());
        }
    }
/**
 * Get an existing gamblers in the data source
 *     search for name containing what the user sends us
 * @param searchValue
 * @return aGambler or null if none found
 */
   // Since the API call might return more than one object
   //     We'll return an array object
   public Gambler[] searchAGambler(String searchValue) {
       // We need to do a HTTP GET to retrieve data from an API
       Gambler[] theGamblers = null;  // Array to hold the data returned from the API
       try {
           //                         getForObject(URL-for-the-API-Call , What you the JSON converted to
           theGamblers = restTemplate.getForObject(BASE_URL + "gamblers/search?name="+searchValue, Gambler[].class);
       } catch (RestClientResponseException expceptionObj) {
           // handles exceptions thrown by rest template and contains status codes
           // Display the status code and any message related too teh error
           System.out.println(expceptionObj.getRawStatusCode() + " : " + expceptionObj.getStatusText());
       } catch (ResourceAccessException exceptionObj) {
           // i/o error, ex: the server isn't running
           // Since the request was never processed there is no status code to display
           // YOu can still display or log the message
           System.out.println(exceptionObj.getMessage());
       }
       return theGamblers;
   }

} // End of Gambler service
