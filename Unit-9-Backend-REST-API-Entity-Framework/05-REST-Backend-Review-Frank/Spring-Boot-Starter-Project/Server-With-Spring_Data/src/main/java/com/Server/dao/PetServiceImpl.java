package com.Server.dao;

import com.Server.model.Pet;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.beans.Transient;
import java.util.List;
import java.util.Optional;

@Service  // Tells the data framework this can dependency inject where needed
public class PetServiceImpl implements IPet {

    // Data members
    PetRepository thePetRepository;   // Reference to repository

    // constructor - Generated by IDE - Note it automatically includes the reference to the respository
    //                                  a repository object will be instantiated an passed to the ctor
    //                                  automatically (Depenendcy Injection)
    @Autowired    // Tells data framework to dependency injection where needed
    public PetServiceImpl(PetRepository thePetRepository) {
        this.thePetRepository = thePetRepository;
    }

    @Override
    public List<Pet> getAllPets() {
        return thePetRepository.findAll(); // Call data framework method to retrieve all objects
    }

    @Override
    public Optional<Pet> returnPet(int pkey) {  // Receive the id of pet we want
        return thePetRepository.findById(pkey); // Call the data framework to retrieve by id
    }

    @Override
    @Transactional   // Optional - Helps the DBMS to manage concurrent changes to data
    public Pet addPet(Pet aPet) {
        // Be sure the object primary key is null
        // if primary key is null - save adds the object to the resource
        return thePetRepository.save(aPet);
    }

    @Override
    @Transactional   // Optional - Helps the DBMS to manage concurrent changes to data
    public Pet updatePet(Pet aPet) {
        // Be sure the object primary key has a value that already exists
        // if primary key is not null - save update the object in the resource
        return thePetRepository.save(aPet);
    }

    @Override
    @Transactional   // Optional - Helps the DBMS to manage concurrent changes to data
    public void deletePet(int priKey) {
        thePetRepository.deleteById(priKey);
    }
}
