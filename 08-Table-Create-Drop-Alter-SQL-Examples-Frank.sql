---------------------------------------------------------------------------------------------------------------
--
-- DROP - remove a table and all it's data from the database
--
-- DROP is permanent - THERE IS NO WAY FOR YOU TO GET THE TABLE AND ITS DATA BACK
--
-- Consider referential constraints - cannot drop a parent if it has dependents
--
--      DROP TABLE table-name             - Will fail if table does not exist or if it has dependents
--
--      DROP TABLE IF EXISTS table-name   - Will run whether table exists or not; will fail if table has dependents
--
--      DROP TABLE IF EXISTS table-name CASCADE   - Will run whether table exists or not and whether has dependents or not
--
--
--  CREATE - define a table to the database manager
--
--       CREATE TABLE table-name
--       (column-name     data-type    NOT NULL,  -- Value required column
--        column-name     data-type,              -- Value optional column 
--        column-name     data-type    DEFAULT   default-value,  -- if value is missing on INERT use the default
--        column-name     data-type    UNIQUE,                   -- value in column must be UNIQUE
--        CONSTRAINT constraint-name PRIMARY KEY (column(s)-in-table),
--        CONSTRAINT constraint-name FOREIGN KEY(for-key-column(s)) REFERENCES parent-table(pri-key-column(s)),
--        CONSTRAINT constraint-name  CHECK (where-predicate)
--       )
--
--       Note: CONSTRAINT is part of the set of column definitions (i.e. inside the parens for column specification)
--             Don't forget to put the column specifcations inside ()
--
--			   Integer primary key values can be auto generated by the Data Base Manager
--             serial is data type to auto generate unique values in postgres
--			   
--             for string data - choices:
--
--                  char(fixed-size) - every column will be the same size regardless of value
--                                     'Bob' takes up as much room as 'Youssef' 
--                                     values are padded with spaces at the end to fill the field
--                                     more efficient for access; may waste storage space
--
--                  varchar(max-size) - every column wil be only the size required to hold the data
--                                      'Bob' will take up 3 chars and 'Youseff' wil take up 7 chars
--                                      values are not padded with spaces
--                                      max-size used by the datanase manager when determine path
--                                      more efficient for storage space; but take longer to process
--                                      (DBMS must determine column every time its accessed)
--
--
-- 
-- ALTER - changing the definition of a table
--
-- Commonly used to add/remove constraints on tables or change existing table attributes
--
--
-- Add a FOREIGN KEY - Establish Parent/Dependant relationship
--
-- FOREIGN KEY must have the same-number, same-order, compatible-data-type as entire PRIMARY KEY of parent
--             and must have a matching value in the PRIMARY KEY in the parent table
--
-- When adding FOREIGN KEY after data has been loaded into table, all FOREIGN KEY values must have a match in parent
--
--      ALTER TABLE dependent-table-name ADD FOREIGN KEY(for-key-column(s)) REFERENCES parent-table(pri-key-column(s)) 
--
-- Remove a constraint from a table
--
--      ALTER TABLE table-name DROP CONSTRAINT constraint_name
--
--
-- Add a column to an existing table
--
-- Cannot add a NOT NULL column to a table with existing data
--
--      ALTER TABLE table-name ADD COLUMN new_column_name data_type constraint
--
--
-- Rename an existing column in a table
--
--      ALTER TABLE table-name RENAME column-name TO new-column-name;
--
--
-- Rename a table
--
--      ALTER TABLE table-name RENAME TO new-table-name  - Will fail if table does not exist
--
--      ALTER TABLE IF EXISTS table-name RENAME TO new-table-name  - Successful if table exists or not
--
---------------------------------------------------------------------------------------------------------------
--
-- Drop any existing versions of the tables we are creating
-- Be sure drop all dependents before you drop parents
--    or add CASCADE to your drop
--
drop table if exists pet_types CASCADE; -- drop even if it has dependents
drop table if exists owner     cascade; -- drop even if it has dependents
drop table if exists pet       cascade; -- drop even if it has dependents

-- 
-- Create the Pet_Types table
-- (Parent Table to pet - Parents must be created before dependents)
--
CREATE TABLE pet_types 
(
--  column-name     data-type   nullness,
	pet_type_id     serial      not null, -- serial tells postgres to autimatically generate a unique integer value
	name            char(15)    not null, -- char is fixed size - specify the fixed, actual size
	species         varchar(50) not null,  -- varchar is variable size - you specifu the max size
	CONSTRAINT pk_pet_type_id PRIMARY KEY (pet_type_id)
)
;

-- 
-- Create the owner table
-- (Parent Table to owner - parents must be created before dependents)
--
Create table owner
(
    owner_id       serial         not null,
	last_name      varchar(50)    not null,
	first_name     varchar(50)    not null,
	address        varchar(100),  -- optional value
	city           varchar(20), 
	state          char(2),
	CONSTRAINT pk_owner_id PRIMARY KEY (owner_id)
)
;
-- 
-- Create the pet table
-- (Dependent Table to pet and owner -Dependents must be created after parents)
--
Create table pet
(
pet_id       serial        not null,
name         varchar(250)  not null,
pet_type_id  integer       not null, -- match to an existing in parent
                                     -- serial will create new value
owner_id     integer       not null, 
CONSTRAINT pk_id PRIMARY KEY (pet_id),
CONSTRAINT fk_pet_type_id FOREIGN KEY(pet_type_id) 
           REFERENCES pet_types(pet_type_id),
CONSTRAINT fk_ownerid FOREIGN KEY(owner_id) 
           REFERENCES owner(owner_id)	  
)
;
